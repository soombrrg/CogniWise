services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes
    networks:
      - app_network

  s3:
    image: minio/minio
    # if using with kuber - bitnami/minio
    container_name: s3
#    command: server --console-address ":9001" http://minio{1...4}/data{1...4}
    command: server  /data  --console-address ":9001"
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: "user"
      MINIO_ROOT_PASSWORD: "password"
      MINIO_BROWSER_REDIRECT_URL: "https://localhost/s3/ui"
      MINIO_DEFAULT_BUCKETS: "local-static:public"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

#  web:
#    image: test
#    container_name: web
#    restart: unless-stopped
#    env_file: src/.env
#    command: ["sh", "-c", "uv run manage.py collectstatic --no-input &&
#                           uv run manage.py migrate &&
#                           uv run uvicorn app.asgi:application --host 0.0.0.0 --port 8000"]
##    command: ["sh", "-c", "uv run uvicorn app.asgi:application --host 0.0.0.0 --port 8000"]
#    ports:
#      - "8000:8000"
#    depends_on:
#      postgres:
#        condition: service_healthy
#      s3:
#        condition: service_healthy
#    networks:
#      - app_network
#
#  nginx:
#    image: nginx:1.19.2-alpine
#    container_name: nginx_proxy
#    restart: unless-stopped
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
#    ports:
#      - "80:80"
#      - "443:443"
#    depends_on:
#      - web
#      - s3
#    networks:
#      - app_network


networks:
  app_network:
    name: app_network