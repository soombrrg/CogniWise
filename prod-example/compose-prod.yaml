services:
  web:
    image: test
    container_name: web
    restart: unless-stopped
    env_file: src/.env
    ports:
      - "${APP_PORT}:8000"
    command: ["sh", "-c", "uv run manage.py collectstatic --no-input &&
                           uv run manage.py migrate &&
                           uv run uvicorn app.asgi:application --host ${APP_HOST} --port ${APP_PORT}"]
    depends_on:
      postgres:
        condition: service_healthy
      s3:
        condition: service_healthy
    networks:
      - app_network

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    env_file: src/.env
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./postgres/data/:/var/lib/postgresql/data/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        compress: "true"
    networks:
      - app_network

  s3:
    image: minio/minio
    # bitnami/minio if using with kuber
    container_name: s3
    restart: unless-stopped
    env_file: src/.env
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
      MINIO_BROWSER_REDIRECT_URL: "https://localhost/s3/ui"
#      MINIO_DEFAULT_BUCKETS: "dev:public"
#      MINIO_SERVER_URL: "http://minio.yourdomen.com:9000"
    command: server  /data  --console-address ":9001"
#    command: server --console-address ":9001" http://minio{1...4}/data{1...4}
    ports:
      - "${S3_PORT}:9000"
      - "${S3_UI_PORT}:9001"
    volumes:
      - ./minio/data:/data
      - ./minio/config:/root/.minio
    healthcheck:
      test: [ "CMD", "curl", "-f", "${AWS_S3_ENDPOINT_URL}/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    env_file: src/.env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - ./redis/data/:/data
      - ./redis/logs/:/var/log/redis
    ports:
      - '${REDIS_PORT}:6379'
    # etc.
    command: redis-server --appendonly yes
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app_network

  nginx:
    image: nginx:1.19.2-alpine
    container_name: nginx_proxy
    restart: unless-stopped
    env_file: src/.env
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    volumes:
      - ./nginx/nginx-prod.conf:/etc/nginx/nginx.conf
      - /etc/letsencrypt/:/etc/letsencrypt/
    depends_on:
      - web
      - s3

networks:
  app_network:
    name: app_network